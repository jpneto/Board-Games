; *** Copyright 1998,9 Zillions Development
; v.1.0.2
; You need to purchase Zillions of Games to load this rules file
; Visit the Zillions web site at http://www.zillions-of-games.com


; *** Promotion and Demotion
; Joao Pedro Neto (Rules and ZRF)

; Rules

; The FIDE rules apply, except in the following: 
; The system of Promotions/Demotions respects the following ordering: P<N=B<R<Q. 
; On odd turns, the moved (non king) piece is promoted. 
;   Queens cannot be promoted, so they cannot move on odd turns. 
;   This rule does not apply to typical FIDE promotions. 
; On even turns, the moved (non king) piece is demoted. 
;   Pawns cannot be demoted, so they cannot move on even turns. 
;   A Bishop or Knight cannot move (and then demote to a Pawn) to the last rank. 
; There is no en-passant.
; Castling affects the Rook.
; A stalemated player looses the game. 

(define king-shift   ($1    (verify not-friend?) (set-attribute never-moved? false) add) )

(define leap2-odd    ($1 $2 (verify not-friend?) (add Rook) ) )
(define leap2-even   ($1 $2 (verify (not (in-zone? promotion-zone))) (verify not-friend?) (add Pawn) ) )

(define slideB-odd   ($1 (while empty? (add Rook) $1) (verify not-friend?) (add Rook) ))
(define slideB-even  ($1 (while empty? (verify (not (in-zone? promotion-zone))) (add Pawn) $1) (verify not-friend?) (verify (not (in-zone? promotion-zone))) (add Pawn) ))

(define slideQ-even   ($1 (while empty? (add Rook) $1) (verify not-friend?) (add Rook) ))

(define rook-slide-even (
  $1
  (while empty? (set-attribute never-moved? false) (add Bishop Knight) $1)
  (verify not-friend?)
  (set-attribute never-moved? false)
  (add Bishop Knight)
))

(define rook-slide-odd (
  $1
  (while empty? (set-attribute never-moved? false) (add Queen) $1)
  (verify not-friend?)
  (set-attribute never-moved? false)
  (add Queen)
))

(define O-O-even
	 ( (verify never-moved?)
	   e ; KB1
	   (verify empty?)
	   e ; KN1
	   (verify empty?)
	   cascade
	   e ; KR1
	   (verify (and friend? (piece? Rook) never-moved?) )
	   from
	   back ; K1
		 ; Save expensive not-attacked?s for last
	   (verify not-attacked?)
	   e ; KB1
	   (verify not-attacked?)
	   to
	   (set-attribute never-moved? false)
		 ; We could check if KN1 is attacked too, but this isn't
		 ; really necessary since Zillions doesn't allow any moves
		 ; into check
	   e ; KN1
	   (set-attribute never-moved? false)
	   (add Bishop Knight)
	 )
)

(define O-O-O-even
     ( (verify never-moved?)
       w ; Q1
       (verify empty?)
       w ; QB1
       (verify empty?)
       cascade
       w ; QN1
       (verify empty?)
       w ; QR1
       (verify (and friend? (piece? Rook) never-moved?) )
       from
       back ; K1
         ; Save expensive not-attacked?s for last
       (verify not-attacked?)
       w ; Q1
       (verify not-attacked?)
       to
       (set-attribute never-moved? false)
         ; We could check if KN1 is attacked too, but this isn't
         ; really necessary since Zillions doesn't allow any moves
         ; into check
       w ; QB1
       (set-attribute never-moved? false)
       (add Bishop Knight)
     )
)

(define O-O-odd
	 ( (verify never-moved?)
	   e ; KB1
	   (verify empty?)
	   e ; KN1
	   (verify empty?)
	   cascade
	   e ; KR1
	   (verify (and friend? (piece? Rook) never-moved?) )
	   from
	   back ; K1
		 ; Save expensive not-attacked?s for last
	   (verify not-attacked?)
	   e ; KB1
	   (verify not-attacked?)
	   to
	   (set-attribute never-moved? false)
		 ; We could check if KN1 is attacked too, but this isn't
		 ; really necessary since Zillions doesn't allow any moves
		 ; into check
	   e ; KN1
	   (set-attribute never-moved? false)
           (add Queen)
	 )
)

(define O-O-O-odd
     ( (verify never-moved?)
       w ; Q1
       (verify empty?)
       w ; QB1
       (verify empty?)
       cascade
       w ; QN1
       (verify empty?)
       w ; QR1
       (verify (and friend? (piece? Rook) never-moved?) )
       from
       back ; K1
         ; Save expensive not-attacked?s for last
       (verify not-attacked?)
       w ; Q1
       (verify not-attacked?)
       to
       (set-attribute never-moved? false)
         ; We could check if KN1 is attacked too, but this isn't
         ; really necessary since Zillions doesn't allow any moves
         ; into check
       w ; QB1
       (set-attribute never-moved? false)
       (add Queen)
     )
)

(define Pawn-add
   (if (in-zone? promotion-zone) (add Knight Bishop Rook Queen) else (add Bishop Knight))
)

(define Pawn-move
   (
      n
      (verify empty?)
      (Pawn-add)
      (verify (in-zone? third-rank))
      n
      (verify empty?)
      (add Bishop Knight)
   )
)

(define Pawn-capture
   (
      $1
      (verify enemy?)
      (Pawn-add)
   )
)

(define Board-Definitions
  (image "images\Chess\Chess8x8.bmp")
  (grid
     (start-rectangle 5 5 55 55)
     (dimensions
         ("a/b/c/d/e/f/g/h" (49 0)) ; files
         ("8/7/6/5/4/3/2/1" (0 49)) ; ranks
     )
     (directions (n 0 -1) (e 1 0) (s 0 1) (w -1 0)
			     (ne 1 -1) (nw -1 -1) (se 1 1) (sw -1 1)
     )
  )
  (symmetry Black (n s)(s n) (nw sw)(sw nw) (ne se)(se ne))
  (zone
     (name promotion-zone)
     (players White)
     (positions a8 b8 c8 d8 e8 f8 g8 h8)
  )
  (zone
     (name promotion-zone)
     (players Black)
     (positions a1 b1 c1 d1 e1 f1 g1 h1)
  )
  (zone
     (name third-rank)
     (players White)
     (positions a3 b3 c3 d3 e3 f3 g3 h3)
  )
  (zone
     (name third-rank)
     (players Black)
     (positions a6 b6 c6 d6 e6 f6 g6 h6)
  )
)

(game
   (title "Chess")
   (description "This variant is faster that FIDE chess, and has its specific tactics even for demoted moves. The board position is very dynamic and a quiet little piece can suddenly turns into a dangerous attacking one! \\
Rules \\
The FIDE rules apply, except in the following: 
The system of Promotions/Demotions respects the following ordering: P<N=B<R<Q. 
On odd turns, the moved (non king) piece is promoted. 
(a) Queens cannot be promoted, so they cannot move on odd turns. 
(b) This rule does not apply to typical FIDE promotions. 
On even turns, the moved (non king) piece is demoted. 
(a) Pawns cannot be demoted, so they cannot move on even turns. 
(b) A Bishop or Knight cannot move (and then demote to a Pawn) to the last rank. 
Castling affects the Rook.
There is no en-passant.
A stalemated player looses the game. ")
   (history "Made by Joao Pedro Neto, at Jan 2000")
   (strategy "* Use Bishops to create Pawns at the 7th rank. \\
              * Use the King on even turns to avoid demotions \\
              * Remember, in even moves, Pawns cannot move! \\
              * Pawns are useful to create new Bishops and Knigths. Use them wisely. \\
              * Rooks have double choice (B or N) in demotion. Queens can only move 1/2 the time! Their potential value tend to be equal.")
   (win-sound "Audio\\Orchestra_CF.wav")
   (loss-sound "Audio\\Orchestra_FC.wav")
   (click-sound "Audio\\Pickup.wav")
   (release-sound "Audio\\WoodThunk.wav")
   (players White Black)
   (turn-order (White odd) (Black odd) (White even) (Black even))
   (pass-turn false)
   (board (Board-Definitions))

   (board-setup
      (White
         (Pawn a2 b2 c2 d2 e2 f2 g2 h2)
         (Knight b1 g1)
         (Bishop c1 f1)
         (Rook a1 h1)
         (Queen d1)
         (King e1)
      )
      (Black
         (Pawn a7 b7 c7 d7 e7 f7 g7 h7)
         (Knight b8 g8)
         (Bishop c8 f8)
         (Rook a8 h8)
         (Queen d8)
         (King e8)
      )
   )

   (piece
      (name Pawn)
	  (help "Pawn: moves forward, captures diagonally, can promote on 8th row")
      (description "Pawn\A Pawn can move straight ahead one square, or two squares from
           its starting position.  A Pawn captures by moving one square ahead and
           diagonally.  If a Pawn reaches the far rank it promotes, changing into
           a Knight, Bishop, Rook, or Queen.  On rare occasions Pawns can also execute
           a move called `En Passant`, or `in passing`.  This allows a Pawn to take
           an enemy Pawn that has just moved two squares.")
      (image White "images\Chess\wpawn.bmp" Black "images\Chess\bpawn.bmp")
      (moves
        (move-type odd)
         (Pawn-capture nw)
         (Pawn-capture ne)
         (Pawn-move)
      )
   )

   (piece
      (name Knight)
	  (help "Knight: moves like an `L`, 2 squares one way and one the other")
      (description "Knight\A Knight moves like an `L`, two squares vertically plus one
          horizontally, or two squares horizontally plus one vertically.  It
          hops over any pieces on the way.")
      (image White "images\Chess\wknight.bmp" Black "images\Chess\bknight.bmp")
      (moves
           (move-type odd)
	     (leap2-odd n ne)
	     (leap2-odd n nw)
	     (leap2-odd s se)
	     (leap2-odd s sw)
	     (leap2-odd e ne)
	     (leap2-odd e se)
	     (leap2-odd w nw)
	     (leap2-odd w sw)
           (move-type even)
	     (leap2-even n ne)
	     (leap2-even n nw)
	     (leap2-even s se)
	     (leap2-even s sw)
	     (leap2-even e ne)
	     (leap2-even e se)
	     (leap2-even w nw)
	     (leap2-even w sw)
      )
   )

   (piece
      (name Bishop)
	  (help "Bishop: slides diagonally any number of squares")
      (description "Bishop\A Bishop moves any number of squares on a diagonal.  It may
           not leap over other pieces.")
      (image White "images\Chess\wbishop.bmp" Black "images\Chess\bbishop.bmp")
      (moves
        (move-type odd)
         (slideB-odd ne)
         (slideB-odd nw)
         (slideB-odd se)
         (slideB-odd sw)
        (move-type even)
         (slideB-even ne)
         (slideB-even nw)
         (slideB-even se)
         (slideB-even sw)
      )
   )

   (piece
      (name Rook)
	  (help "Rook: slides any number of squares along the row or column.")
      (description "Rook\A Rook moves any number of squares orthogonally on a rank
           or a file.  It may not leap over other pieces.")
      (image White "images\Chess\wrook.bmp" Black "images\Chess\brook.bmp")
      (attribute never-moved? true)
      (moves
        (move-type odd)
         (rook-slide-odd n)
         (rook-slide-odd e)
         (rook-slide-odd s)
         (rook-slide-odd w)
        (move-type even)
         (rook-slide-even n)
         (rook-slide-even e)
         (rook-slide-even s)
         (rook-slide-even w)
      )
   )

   (piece
      (name Queen)
	  (help "Queen: can slide any number of squares in any direction")
      (description "Queen\A Queen moves any number of squares in a straight line.
          It may not leap over other pieces.")
      (image White "images\Chess\wqueen.bmp" Black "images\Chess\bqueen.bmp")
      (moves
        (move-type even)
         (slideQ-even n)
         (slideQ-even e)
         (slideQ-even s)
         (slideQ-even w)
         (slideQ-even ne)
         (slideQ-even nw)
         (slideQ-even se)
         (slideQ-even sw)
      )
   )

   (piece
      (name King)
	  (help "King: steps 1 square in any direction to a safe square")
      (description "King\A King can move to any adjacent square, but never to a 
	      square where it can be captured.  It may also `castle`
          with the Rook if neither the Rook nor King has moved yet and there is
          nothing in between them.  In castling the King moves two squares nearer
          the Rook and the Rook leaps to the far side of the King.  You may not
          castle out of or through check, or if the King or Rook involved has 
		  previously moved.")
      (image White "images\Chess\wking.bmp" Black "images\Chess\bking.bmp")
      (attribute never-moved? true)
      (moves
        (move-type even)
         (king-shift n)
         (king-shift e)
         (king-shift s)
         (king-shift w)
         (king-shift ne)
         (king-shift nw)
         (king-shift se)
         (king-shift sw)
         (O-O-even)
         (O-O-O-even)
        (move-type odd)
         (king-shift n)
         (king-shift e)
         (king-shift s)
         (king-shift w)
         (king-shift ne)
         (king-shift nw)
         (king-shift se)
         (king-shift sw)
         (O-O-odd)
         (O-O-O-odd)
      )
   )

   (loss-condition (White Black) (checkmated King) )
   (loss-condition (White Black) stalemated )
)

(variant
   (title "-") ; --------------------------------------------------------
)

; **************************************************************************
